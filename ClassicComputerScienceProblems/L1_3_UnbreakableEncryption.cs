using System;
using System.Text;
using Xunit;

namespace ClassicComputerScienceProblems
{
    /*
     * The idea is to use random data as a key to encrypt a text
     *   text + key (random data) = encrypted data
     * The new encrypted data and the key are useless on it's own but together
     * they can be used to get the original text
     *   encrypted data + key = text
     */
    public class L1_3_UnbreakableEncryption
    {
        [Fact]
        public void TestOneTimePadEncryption()
        {
            var originalText = "Hello world!";

            var encrypted = Encrypt(originalText);
            var actual = Decrypt(encrypted);

            Assert.Equal(originalText, actual);
        }

        /*
         * A string can be converted into an array of bytes,
         * KeyPair stores the key and the encrypted data and it's called KeyPair because
         * we need both keys to decrypt the data
         */
        public class KeyPair {
            public byte[] Key { get;  }
            public byte[] EncryptedData { get;  }

            public KeyPair(byte[] key, byte[] encryptedData) {
                this.Key = key;
                this.EncryptedData = encryptedData;
            }
        }

        // To form our product, we will simply XOR bytes from our original String with
        // the randomly generated bytes of the same length
        public static KeyPair Encrypt(string original)
        {
            var originalBytes = Encoding.UTF8.GetBytes(original);
            var dummyKey = RandomKey(originalBytes.Length);
            var encryptedKey = new byte[originalBytes.Length];
            for (var i = 0; i < originalBytes.Length; i++) {
                // XOR every byte
                encryptedKey[i] = (byte) (originalBytes[i] ^ dummyKey[i]);
            }
            return new KeyPair(dummyKey, encryptedKey);
        }

        // Length should be the of the same length of the text tha we want to encrypt
        public static byte[] RandomKey(int length)
        {
            var dummy = new byte[length];
            var random = new Random();
            random.NextBytes(dummy);
            return dummy;
        }

        public static string Decrypt(KeyPair kp) {
            var decrypted = new byte[kp.Key.Length];
            for (var i = 0; i < kp.Key.Length; i++) {
                // XOR every byte
                decrypted[i] = (byte) (kp.Key[i] ^ kp.EncryptedData[i]);
            }
            return Encoding.UTF8.GetString(decrypted);
        }

    }
}